//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("SPModel", "FK_Plans_Departaments", "Departaments", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.Departament), "Plans", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.Plan), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_Plans_Faculties", "Faculties", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.Faculty), "Plans", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.Plan), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_Plans_StudiesTypes", "StudiesTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.StudiesType), "Plans", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.Plan), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_Plans_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(StudiesPlansModels.Models.User), "Plans", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.Plan), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_Users_Roles", "Roles", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.Role), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.User), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_SpecializationsData_Specializations", "Specializations", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.Specialization), "SpecializationsData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SpecializationsData), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_SubjectTypesData_SubjectTypes", "SubjectTypes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.SubjectType), "SubjectTypesData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SubjectTypesData), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FacultiesDepartaments", "Departaments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.Departament), "Faculties", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.Faculty))]
[assembly: EdmRelationshipAttribute("SPModel", "FK_SubjectsData_Departaments", "Departament", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.Departament), "SubjectsData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SubjectsData), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_SubjectsData_Faculties", "Faculty", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.Faculty), "SubjectsData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SubjectsData), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_SubjectsData_Semesters", "Semester", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.Semester), "SubjectsData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SubjectsData), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_SubjectsData_SpecializationsData", "SpecializationsData", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(StudiesPlansModels.Models.SpecializationsData), "SubjectsData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SubjectsData), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_SubjectsData_Subjects", "Subject", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.Subject), "SubjectsData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SubjectsData), true)]
[assembly: EdmRelationshipAttribute("SPModel", "FK_SubjectTypesData_SubjectsData", "SubjectsData", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.SubjectsData), "SubjectTypesData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SubjectTypesData), true)]
[assembly: EdmRelationshipAttribute("SPModel", "PlansData", "Plan", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.Plan), "SubjectsData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SubjectsData))]
[assembly: EdmRelationshipAttribute("SPModel", "FK_SubjectsData_Institutes", "Institute", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(StudiesPlansModels.Models.Institute), "SubjectsData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(StudiesPlansModels.Models.SubjectsData), true)]

#endregion

namespace StudiesPlansModels.Models
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class SPDatabase : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new SPDatabase object using the connection string found in the 'SPDatabase' section of the application configuration file.
        /// </summary>
        public SPDatabase() : base("name=SPDatabase", "SPDatabase")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SPDatabase object.
        /// </summary>
        public SPDatabase(string connectionString) : base(connectionString, "SPDatabase")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SPDatabase object.
        /// </summary>
        public SPDatabase(EntityConnection connection) : base(connection, "SPDatabase")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Departament> Departaments
        {
            get
            {
                if ((_Departaments == null))
                {
                    _Departaments = base.CreateObjectSet<Departament>("Departaments");
                }
                return _Departaments;
            }
        }
        private ObjectSet<Departament> _Departaments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Faculty> Faculties
        {
            get
            {
                if ((_Faculties == null))
                {
                    _Faculties = base.CreateObjectSet<Faculty>("Faculties");
                }
                return _Faculties;
            }
        }
        private ObjectSet<Faculty> _Faculties;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Plan> Plans
        {
            get
            {
                if ((_Plans == null))
                {
                    _Plans = base.CreateObjectSet<Plan>("Plans");
                }
                return _Plans;
            }
        }
        private ObjectSet<Plan> _Plans;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Role> Roles
        {
            get
            {
                if ((_Roles == null))
                {
                    _Roles = base.CreateObjectSet<Role>("Roles");
                }
                return _Roles;
            }
        }
        private ObjectSet<Role> _Roles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Semester> Semesters
        {
            get
            {
                if ((_Semesters == null))
                {
                    _Semesters = base.CreateObjectSet<Semester>("Semesters");
                }
                return _Semesters;
            }
        }
        private ObjectSet<Semester> _Semesters;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Specialization> Specializations
        {
            get
            {
                if ((_Specializations == null))
                {
                    _Specializations = base.CreateObjectSet<Specialization>("Specializations");
                }
                return _Specializations;
            }
        }
        private ObjectSet<Specialization> _Specializations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SpecializationsData> SpecializationsDatas
        {
            get
            {
                if ((_SpecializationsDatas == null))
                {
                    _SpecializationsDatas = base.CreateObjectSet<SpecializationsData>("SpecializationsDatas");
                }
                return _SpecializationsDatas;
            }
        }
        private ObjectSet<SpecializationsData> _SpecializationsDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<StudiesType> StudiesTypes
        {
            get
            {
                if ((_StudiesTypes == null))
                {
                    _StudiesTypes = base.CreateObjectSet<StudiesType>("StudiesTypes");
                }
                return _StudiesTypes;
            }
        }
        private ObjectSet<StudiesType> _StudiesTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Subject> Subjects
        {
            get
            {
                if ((_Subjects == null))
                {
                    _Subjects = base.CreateObjectSet<Subject>("Subjects");
                }
                return _Subjects;
            }
        }
        private ObjectSet<Subject> _Subjects;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SubjectType> SubjectTypes
        {
            get
            {
                if ((_SubjectTypes == null))
                {
                    _SubjectTypes = base.CreateObjectSet<SubjectType>("SubjectTypes");
                }
                return _SubjectTypes;
            }
        }
        private ObjectSet<SubjectType> _SubjectTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SubjectTypesData> SubjectTypesDatas
        {
            get
            {
                if ((_SubjectTypesDatas == null))
                {
                    _SubjectTypesDatas = base.CreateObjectSet<SubjectTypesData>("SubjectTypesDatas");
                }
                return _SubjectTypesDatas;
            }
        }
        private ObjectSet<SubjectTypesData> _SubjectTypesDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<SubjectsData> SubjectsDatas
        {
            get
            {
                if ((_SubjectsDatas == null))
                {
                    _SubjectsDatas = base.CreateObjectSet<SubjectsData>("SubjectsDatas");
                }
                return _SubjectsDatas;
            }
        }
        private ObjectSet<SubjectsData> _SubjectsDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Institute> Institutes
        {
            get
            {
                if ((_Institutes == null))
                {
                    _Institutes = base.CreateObjectSet<Institute>("Institutes");
                }
                return _Institutes;
            }
        }
        private ObjectSet<Institute> _Institutes;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Departaments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDepartaments(Departament departament)
        {
            base.AddObject("Departaments", departament);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Faculties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFaculties(Faculty faculty)
        {
            base.AddObject("Faculties", faculty);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Plans EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlans(Plan plan)
        {
            base.AddObject("Plans", plan);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Roles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoles(Role role)
        {
            base.AddObject("Roles", role);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Semesters EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSemesters(Semester semester)
        {
            base.AddObject("Semesters", semester);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Specializations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSpecializations(Specialization specialization)
        {
            base.AddObject("Specializations", specialization);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SpecializationsDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSpecializationsDatas(SpecializationsData specializationsData)
        {
            base.AddObject("SpecializationsDatas", specializationsData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the StudiesTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStudiesTypes(StudiesType studiesType)
        {
            base.AddObject("StudiesTypes", studiesType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Subjects EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubjects(Subject subject)
        {
            base.AddObject("Subjects", subject);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SubjectTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubjectTypes(SubjectType subjectType)
        {
            base.AddObject("SubjectTypes", subjectType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SubjectTypesDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubjectTypesDatas(SubjectTypesData subjectTypesData)
        {
            base.AddObject("SubjectTypesDatas", subjectTypesData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the SubjectsDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToSubjectsDatas(SubjectsData subjectsData)
        {
            base.AddObject("SubjectsDatas", subjectsData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Institutes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInstitutes(Institute institute)
        {
            base.AddObject("Institutes", institute);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="Departament")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Departament : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Departament object.
        /// </summary>
        /// <param name="departamentID">Initial value of the DepartamentID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Departament CreateDepartament(global::System.Int32 departamentID, global::System.String name)
        {
            Departament departament = new Departament();
            departament.DepartamentID = departamentID;
            departament.Name = name;
            return departament;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DepartamentID
        {
            get
            {
                return _DepartamentID;
            }
            set
            {
                if (_DepartamentID != value)
                {
                    OnDepartamentIDChanging(value);
                    ReportPropertyChanging("DepartamentID");
                    _DepartamentID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DepartamentID");
                    OnDepartamentIDChanged();
                }
            }
        }
        private global::System.Int32 _DepartamentID;
        partial void OnDepartamentIDChanging(global::System.Int32 value);
        partial void OnDepartamentIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Plans_Departaments", "Plans")]
        public EntityCollection<Plan> Plans
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Plan>("SPModel.FK_Plans_Departaments", "Plans");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Plan>("SPModel.FK_Plans_Departaments", "Plans", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FacultiesDepartaments", "Faculties")]
        public EntityCollection<Faculty> Faculties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Faculty>("SPModel.FacultiesDepartaments", "Faculties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Faculty>("SPModel.FacultiesDepartaments", "Faculties", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Departaments", "SubjectsData")]
        public EntityCollection<SubjectsData> SubjectsDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Departaments", "SubjectsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Departaments", "SubjectsData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="Faculty")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Faculty : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Faculty object.
        /// </summary>
        /// <param name="facultyID">Initial value of the FacultyID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Faculty CreateFaculty(global::System.Int32 facultyID, global::System.String name)
        {
            Faculty faculty = new Faculty();
            faculty.FacultyID = facultyID;
            faculty.Name = name;
            return faculty;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FacultyID
        {
            get
            {
                return _FacultyID;
            }
            set
            {
                if (_FacultyID != value)
                {
                    OnFacultyIDChanging(value);
                    ReportPropertyChanging("FacultyID");
                    _FacultyID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FacultyID");
                    OnFacultyIDChanged();
                }
            }
        }
        private global::System.Int32 _FacultyID;
        partial void OnFacultyIDChanging(global::System.Int32 value);
        partial void OnFacultyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Plans_Faculties", "Plans")]
        public EntityCollection<Plan> Plans
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Plan>("SPModel.FK_Plans_Faculties", "Plans");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Plan>("SPModel.FK_Plans_Faculties", "Plans", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FacultiesDepartaments", "Departaments")]
        public EntityCollection<Departament> Departaments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Departament>("SPModel.FacultiesDepartaments", "Departaments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Departament>("SPModel.FacultiesDepartaments", "Departaments", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Faculties", "SubjectsData")]
        public EntityCollection<SubjectsData> SubjectsDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Faculties", "SubjectsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Faculties", "SubjectsData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="Institute")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Institute : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Institute object.
        /// </summary>
        /// <param name="instituteID">Initial value of the InstituteID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Institute CreateInstitute(global::System.Int32 instituteID, global::System.String name)
        {
            Institute institute = new Institute();
            institute.InstituteID = instituteID;
            institute.Name = name;
            return institute;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 InstituteID
        {
            get
            {
                return _InstituteID;
            }
            set
            {
                if (_InstituteID != value)
                {
                    OnInstituteIDChanging(value);
                    ReportPropertyChanging("InstituteID");
                    _InstituteID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("InstituteID");
                    OnInstituteIDChanged();
                }
            }
        }
        private global::System.Int32 _InstituteID;
        partial void OnInstituteIDChanging(global::System.Int32 value);
        partial void OnInstituteIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Institutes", "SubjectsData")]
        public EntityCollection<SubjectsData> SubjectsDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Institutes", "SubjectsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Institutes", "SubjectsData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="Plan")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Plan : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Plan object.
        /// </summary>
        /// <param name="planID">Initial value of the PlanID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="yearStart">Initial value of the YearStart property.</param>
        /// <param name="semesterStart">Initial value of the SemesterStart property.</param>
        /// <param name="semesterEnd">Initial value of the SemesterEnd property.</param>
        /// <param name="isMandatory">Initial value of the IsMandatory property.</param>
        /// <param name="departamentID">Initial value of the DepartamentID property.</param>
        /// <param name="facultyID">Initial value of the FacultyID property.</param>
        /// <param name="studiesTypeID">Initial value of the StudiesTypeID property.</param>
        public static Plan CreatePlan(global::System.Int32 planID, global::System.Int32 name, global::System.DateTime yearStart, global::System.String semesterStart, global::System.String semesterEnd, global::System.Boolean isMandatory, global::System.Int32 departamentID, global::System.Int32 facultyID, global::System.Int32 studiesTypeID)
        {
            Plan plan = new Plan();
            plan.PlanID = planID;
            plan.Name = name;
            plan.YearStart = yearStart;
            plan.SemesterStart = semesterStart;
            plan.SemesterEnd = semesterEnd;
            plan.IsMandatory = isMandatory;
            plan.DepartamentID = departamentID;
            plan.FacultyID = facultyID;
            plan.StudiesTypeID = studiesTypeID;
            return plan;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PlanID
        {
            get
            {
                return _PlanID;
            }
            set
            {
                if (_PlanID != value)
                {
                    OnPlanIDChanging(value);
                    ReportPropertyChanging("PlanID");
                    _PlanID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PlanID");
                    OnPlanIDChanged();
                }
            }
        }
        private global::System.Int32 _PlanID;
        partial void OnPlanIDChanging(global::System.Int32 value);
        partial void OnPlanIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.Int32 _Name;
        partial void OnNameChanging(global::System.Int32 value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime YearStart
        {
            get
            {
                return _YearStart;
            }
            set
            {
                OnYearStartChanging(value);
                ReportPropertyChanging("YearStart");
                _YearStart = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("YearStart");
                OnYearStartChanged();
            }
        }
        private global::System.DateTime _YearStart;
        partial void OnYearStartChanging(global::System.DateTime value);
        partial void OnYearStartChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> YearEnd
        {
            get
            {
                return _YearEnd;
            }
            set
            {
                OnYearEndChanging(value);
                ReportPropertyChanging("YearEnd");
                _YearEnd = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("YearEnd");
                OnYearEndChanged();
            }
        }
        private Nullable<global::System.DateTime> _YearEnd;
        partial void OnYearEndChanging(Nullable<global::System.DateTime> value);
        partial void OnYearEndChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SemesterStart
        {
            get
            {
                return _SemesterStart;
            }
            set
            {
                OnSemesterStartChanging(value);
                ReportPropertyChanging("SemesterStart");
                _SemesterStart = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SemesterStart");
                OnSemesterStartChanged();
            }
        }
        private global::System.String _SemesterStart;
        partial void OnSemesterStartChanging(global::System.String value);
        partial void OnSemesterStartChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SemesterEnd
        {
            get
            {
                return _SemesterEnd;
            }
            set
            {
                OnSemesterEndChanging(value);
                ReportPropertyChanging("SemesterEnd");
                _SemesterEnd = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SemesterEnd");
                OnSemesterEndChanged();
            }
        }
        private global::System.String _SemesterEnd;
        partial void OnSemesterEndChanging(global::System.String value);
        partial void OnSemesterEndChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsMandatory
        {
            get
            {
                return _IsMandatory;
            }
            set
            {
                OnIsMandatoryChanging(value);
                ReportPropertyChanging("IsMandatory");
                _IsMandatory = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsMandatory");
                OnIsMandatoryChanged();
            }
        }
        private global::System.Boolean _IsMandatory;
        partial void OnIsMandatoryChanging(global::System.Boolean value);
        partial void OnIsMandatoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DepartamentID
        {
            get
            {
                return _DepartamentID;
            }
            set
            {
                OnDepartamentIDChanging(value);
                ReportPropertyChanging("DepartamentID");
                _DepartamentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartamentID");
                OnDepartamentIDChanged();
            }
        }
        private global::System.Int32 _DepartamentID;
        partial void OnDepartamentIDChanging(global::System.Int32 value);
        partial void OnDepartamentIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FacultyID
        {
            get
            {
                return _FacultyID;
            }
            set
            {
                OnFacultyIDChanging(value);
                ReportPropertyChanging("FacultyID");
                _FacultyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyID");
                OnFacultyIDChanged();
            }
        }
        private global::System.Int32 _FacultyID;
        partial void OnFacultyIDChanging(global::System.Int32 value);
        partial void OnFacultyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StudiesTypeID
        {
            get
            {
                return _StudiesTypeID;
            }
            set
            {
                OnStudiesTypeIDChanging(value);
                ReportPropertyChanging("StudiesTypeID");
                _StudiesTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StudiesTypeID");
                OnStudiesTypeIDChanged();
            }
        }
        private global::System.Int32 _StudiesTypeID;
        partial void OnStudiesTypeIDChanging(global::System.Int32 value);
        partial void OnStudiesTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> LastEditUserID
        {
            get
            {
                return _LastEditUserID;
            }
            set
            {
                OnLastEditUserIDChanging(value);
                ReportPropertyChanging("LastEditUserID");
                _LastEditUserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastEditUserID");
                OnLastEditUserIDChanged();
            }
        }
        private Nullable<global::System.Int32> _LastEditUserID;
        partial void OnLastEditUserIDChanging(Nullable<global::System.Int32> value);
        partial void OnLastEditUserIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Plans_Departaments", "Departaments")]
        public Departament Departament
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Departament>("SPModel.FK_Plans_Departaments", "Departaments").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Departament>("SPModel.FK_Plans_Departaments", "Departaments").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Departament> DepartamentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Departament>("SPModel.FK_Plans_Departaments", "Departaments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Departament>("SPModel.FK_Plans_Departaments", "Departaments", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Plans_Faculties", "Faculties")]
        public Faculty Faculty
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faculty>("SPModel.FK_Plans_Faculties", "Faculties").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faculty>("SPModel.FK_Plans_Faculties", "Faculties").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Faculty> FacultyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faculty>("SPModel.FK_Plans_Faculties", "Faculties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Faculty>("SPModel.FK_Plans_Faculties", "Faculties", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Plans_StudiesTypes", "StudiesTypes")]
        public StudiesType StudiesType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StudiesType>("SPModel.FK_Plans_StudiesTypes", "StudiesTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StudiesType>("SPModel.FK_Plans_StudiesTypes", "StudiesTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<StudiesType> StudiesTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<StudiesType>("SPModel.FK_Plans_StudiesTypes", "StudiesTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<StudiesType>("SPModel.FK_Plans_StudiesTypes", "StudiesTypes", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Plans_Users", "Users")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SPModel.FK_Plans_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SPModel.FK_Plans_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("SPModel.FK_Plans_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("SPModel.FK_Plans_Users", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "PlansData", "SubjectsData")]
        public EntityCollection<SubjectsData> SubjectsDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectsData>("SPModel.PlansData", "SubjectsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectsData>("SPModel.PlansData", "SubjectsData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="Role")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Role : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Role object.
        /// </summary>
        /// <param name="roleID">Initial value of the RoleID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Role CreateRole(global::System.Int32 roleID, global::System.String name)
        {
            Role role = new Role();
            role.RoleID = roleID;
            role.Name = name;
            return role;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                if (_RoleID != value)
                {
                    OnRoleIDChanging(value);
                    ReportPropertyChanging("RoleID");
                    _RoleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleID");
                    OnRoleIDChanged();
                }
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Users_Roles", "Users")]
        public EntityCollection<User> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("SPModel.FK_Users_Roles", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("SPModel.FK_Users_Roles", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="Semester")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Semester : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Semester object.
        /// </summary>
        /// <param name="semesterID">Initial value of the SemesterID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="studyYear">Initial value of the StudyYear property.</param>
        /// <param name="semester1">Initial value of the Semester1 property.</param>
        public static Semester CreateSemester(global::System.Int32 semesterID, global::System.String name, global::System.Int32 studyYear, global::System.Int32 semester1)
        {
            Semester semester = new Semester();
            semester.SemesterID = semesterID;
            semester.Name = name;
            semester.StudyYear = studyYear;
            semester.Semester1 = semester1;
            return semester;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SemesterID
        {
            get
            {
                return _SemesterID;
            }
            set
            {
                if (_SemesterID != value)
                {
                    OnSemesterIDChanging(value);
                    ReportPropertyChanging("SemesterID");
                    _SemesterID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SemesterID");
                    OnSemesterIDChanged();
                }
            }
        }
        private global::System.Int32 _SemesterID;
        partial void OnSemesterIDChanging(global::System.Int32 value);
        partial void OnSemesterIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StudyYear
        {
            get
            {
                return _StudyYear;
            }
            set
            {
                OnStudyYearChanging(value);
                ReportPropertyChanging("StudyYear");
                _StudyYear = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StudyYear");
                OnStudyYearChanged();
            }
        }
        private global::System.Int32 _StudyYear;
        partial void OnStudyYearChanging(global::System.Int32 value);
        partial void OnStudyYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Semester1
        {
            get
            {
                return _Semester1;
            }
            set
            {
                OnSemester1Changing(value);
                ReportPropertyChanging("Semester1");
                _Semester1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Semester1");
                OnSemester1Changed();
            }
        }
        private global::System.Int32 _Semester1;
        partial void OnSemester1Changing(global::System.Int32 value);
        partial void OnSemester1Changed();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Semesters", "SubjectsData")]
        public EntityCollection<SubjectsData> SubjectsDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Semesters", "SubjectsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Semesters", "SubjectsData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="Specialization")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Specialization : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Specialization object.
        /// </summary>
        /// <param name="specializationID">Initial value of the SpecializationID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Specialization CreateSpecialization(global::System.Int32 specializationID, global::System.String name)
        {
            Specialization specialization = new Specialization();
            specialization.SpecializationID = specializationID;
            specialization.Name = name;
            return specialization;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SpecializationID
        {
            get
            {
                return _SpecializationID;
            }
            set
            {
                if (_SpecializationID != value)
                {
                    OnSpecializationIDChanging(value);
                    ReportPropertyChanging("SpecializationID");
                    _SpecializationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SpecializationID");
                    OnSpecializationIDChanged();
                }
            }
        }
        private global::System.Int32 _SpecializationID;
        partial void OnSpecializationIDChanging(global::System.Int32 value);
        partial void OnSpecializationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SpecializationsData_Specializations", "SpecializationsData")]
        public EntityCollection<SpecializationsData> SpecializationsDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SpecializationsData>("SPModel.FK_SpecializationsData_Specializations", "SpecializationsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SpecializationsData>("SPModel.FK_SpecializationsData_Specializations", "SpecializationsData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="SpecializationsData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SpecializationsData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SpecializationsData object.
        /// </summary>
        /// <param name="specializationDataID">Initial value of the SpecializationDataID property.</param>
        /// <param name="specializationID">Initial value of the SpecializationID property.</param>
        /// <param name="isGeneral">Initial value of the IsGeneral property.</param>
        /// <param name="isElective">Initial value of the IsElective property.</param>
        public static SpecializationsData CreateSpecializationsData(global::System.Int32 specializationDataID, global::System.Int32 specializationID, global::System.Boolean isGeneral, global::System.Boolean isElective)
        {
            SpecializationsData specializationsData = new SpecializationsData();
            specializationsData.SpecializationDataID = specializationDataID;
            specializationsData.SpecializationID = specializationID;
            specializationsData.IsGeneral = isGeneral;
            specializationsData.IsElective = isElective;
            return specializationsData;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SpecializationDataID
        {
            get
            {
                return _SpecializationDataID;
            }
            set
            {
                if (_SpecializationDataID != value)
                {
                    OnSpecializationDataIDChanging(value);
                    ReportPropertyChanging("SpecializationDataID");
                    _SpecializationDataID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SpecializationDataID");
                    OnSpecializationDataIDChanged();
                }
            }
        }
        private global::System.Int32 _SpecializationDataID;
        partial void OnSpecializationDataIDChanging(global::System.Int32 value);
        partial void OnSpecializationDataIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SpecializationID
        {
            get
            {
                return _SpecializationID;
            }
            set
            {
                OnSpecializationIDChanging(value);
                ReportPropertyChanging("SpecializationID");
                _SpecializationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SpecializationID");
                OnSpecializationIDChanged();
            }
        }
        private global::System.Int32 _SpecializationID;
        partial void OnSpecializationIDChanging(global::System.Int32 value);
        partial void OnSpecializationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsGeneral
        {
            get
            {
                return _IsGeneral;
            }
            set
            {
                OnIsGeneralChanging(value);
                ReportPropertyChanging("IsGeneral");
                _IsGeneral = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsGeneral");
                OnIsGeneralChanged();
            }
        }
        private global::System.Boolean _IsGeneral;
        partial void OnIsGeneralChanging(global::System.Boolean value);
        partial void OnIsGeneralChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsElective
        {
            get
            {
                return _IsElective;
            }
            set
            {
                OnIsElectiveChanging(value);
                ReportPropertyChanging("IsElective");
                _IsElective = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsElective");
                OnIsElectiveChanged();
            }
        }
        private global::System.Boolean _IsElective;
        partial void OnIsElectiveChanging(global::System.Boolean value);
        partial void OnIsElectiveChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SpecializationsData_Specializations", "Specializations")]
        public Specialization Specialization
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Specialization>("SPModel.FK_SpecializationsData_Specializations", "Specializations").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Specialization>("SPModel.FK_SpecializationsData_Specializations", "Specializations").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Specialization> SpecializationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Specialization>("SPModel.FK_SpecializationsData_Specializations", "Specializations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Specialization>("SPModel.FK_SpecializationsData_Specializations", "Specializations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_SpecializationsData", "SubjectsData")]
        public EntityCollection<SubjectsData> SubjectsDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_SpecializationsData", "SubjectsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_SpecializationsData", "SubjectsData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="StudiesType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class StudiesType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new StudiesType object.
        /// </summary>
        /// <param name="studiesTypeID">Initial value of the StudiesTypeID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static StudiesType CreateStudiesType(global::System.Int32 studiesTypeID, global::System.String name)
        {
            StudiesType studiesType = new StudiesType();
            studiesType.StudiesTypeID = studiesTypeID;
            studiesType.Name = name;
            return studiesType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StudiesTypeID
        {
            get
            {
                return _StudiesTypeID;
            }
            set
            {
                if (_StudiesTypeID != value)
                {
                    OnStudiesTypeIDChanging(value);
                    ReportPropertyChanging("StudiesTypeID");
                    _StudiesTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StudiesTypeID");
                    OnStudiesTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _StudiesTypeID;
        partial void OnStudiesTypeIDChanging(global::System.Int32 value);
        partial void OnStudiesTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Plans_StudiesTypes", "Plans")]
        public EntityCollection<Plan> Plans
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Plan>("SPModel.FK_Plans_StudiesTypes", "Plans");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Plan>("SPModel.FK_Plans_StudiesTypes", "Plans", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="Subject")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Subject : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Subject object.
        /// </summary>
        /// <param name="subjectID">Initial value of the SubjectID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Subject CreateSubject(global::System.Int32 subjectID, global::System.String name)
        {
            Subject subject = new Subject();
            subject.SubjectID = subjectID;
            subject.Name = name;
            return subject;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SubjectID
        {
            get
            {
                return _SubjectID;
            }
            set
            {
                if (_SubjectID != value)
                {
                    OnSubjectIDChanging(value);
                    ReportPropertyChanging("SubjectID");
                    _SubjectID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SubjectID");
                    OnSubjectIDChanged();
                }
            }
        }
        private global::System.Int32 _SubjectID;
        partial void OnSubjectIDChanging(global::System.Int32 value);
        partial void OnSubjectIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Subjects", "SubjectsData")]
        public EntityCollection<SubjectsData> SubjectsDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Subjects", "SubjectsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectsData>("SPModel.FK_SubjectsData_Subjects", "SubjectsData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="SubjectsData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubjectsData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SubjectsData object.
        /// </summary>
        /// <param name="subjectID">Initial value of the SubjectID property.</param>
        /// <param name="semesterID">Initial value of the SemesterID property.</param>
        /// <param name="facultyID">Initial value of the FacultyID property.</param>
        /// <param name="ects">Initial value of the Ects property.</param>
        /// <param name="isExam">Initial value of the IsExam property.</param>
        /// <param name="departamentID">Initial value of the DepartamentID property.</param>
        /// <param name="subjectDataID">Initial value of the SubjectDataID property.</param>
        /// <param name="instituteID">Initial value of the InstituteID property.</param>
        public static SubjectsData CreateSubjectsData(global::System.Int32 subjectID, global::System.Int32 semesterID, global::System.Int32 facultyID, global::System.Double ects, global::System.Boolean isExam, global::System.Int32 departamentID, global::System.Int32 subjectDataID, global::System.Int32 instituteID)
        {
            SubjectsData subjectsData = new SubjectsData();
            subjectsData.SubjectID = subjectID;
            subjectsData.SemesterID = semesterID;
            subjectsData.FacultyID = facultyID;
            subjectsData.Ects = ects;
            subjectsData.IsExam = isExam;
            subjectsData.DepartamentID = departamentID;
            subjectsData.SubjectDataID = subjectDataID;
            subjectsData.InstituteID = instituteID;
            return subjectsData;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SubjectID
        {
            get
            {
                return _SubjectID;
            }
            set
            {
                OnSubjectIDChanging(value);
                ReportPropertyChanging("SubjectID");
                _SubjectID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SubjectID");
                OnSubjectIDChanged();
            }
        }
        private global::System.Int32 _SubjectID;
        partial void OnSubjectIDChanging(global::System.Int32 value);
        partial void OnSubjectIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SemesterID
        {
            get
            {
                return _SemesterID;
            }
            set
            {
                OnSemesterIDChanging(value);
                ReportPropertyChanging("SemesterID");
                _SemesterID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SemesterID");
                OnSemesterIDChanged();
            }
        }
        private global::System.Int32 _SemesterID;
        partial void OnSemesterIDChanging(global::System.Int32 value);
        partial void OnSemesterIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FacultyID
        {
            get
            {
                return _FacultyID;
            }
            set
            {
                OnFacultyIDChanging(value);
                ReportPropertyChanging("FacultyID");
                _FacultyID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacultyID");
                OnFacultyIDChanged();
            }
        }
        private global::System.Int32 _FacultyID;
        partial void OnFacultyIDChanging(global::System.Int32 value);
        partial void OnFacultyIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Ects
        {
            get
            {
                return _Ects;
            }
            set
            {
                OnEctsChanging(value);
                ReportPropertyChanging("Ects");
                _Ects = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Ects");
                OnEctsChanged();
            }
        }
        private global::System.Double _Ects;
        partial void OnEctsChanging(global::System.Double value);
        partial void OnEctsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsExam
        {
            get
            {
                return _IsExam;
            }
            set
            {
                OnIsExamChanging(value);
                ReportPropertyChanging("IsExam");
                _IsExam = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsExam");
                OnIsExamChanged();
            }
        }
        private global::System.Boolean _IsExam;
        partial void OnIsExamChanging(global::System.Boolean value);
        partial void OnIsExamChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> SpecializationDataID
        {
            get
            {
                return _SpecializationDataID;
            }
            set
            {
                OnSpecializationDataIDChanging(value);
                ReportPropertyChanging("SpecializationDataID");
                _SpecializationDataID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SpecializationDataID");
                OnSpecializationDataIDChanged();
            }
        }
        private Nullable<global::System.Int32> _SpecializationDataID;
        partial void OnSpecializationDataIDChanging(Nullable<global::System.Int32> value);
        partial void OnSpecializationDataIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DepartamentID
        {
            get
            {
                return _DepartamentID;
            }
            set
            {
                OnDepartamentIDChanging(value);
                ReportPropertyChanging("DepartamentID");
                _DepartamentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DepartamentID");
                OnDepartamentIDChanged();
            }
        }
        private global::System.Int32 _DepartamentID;
        partial void OnDepartamentIDChanging(global::System.Int32 value);
        partial void OnDepartamentIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SubjectDataID
        {
            get
            {
                return _SubjectDataID;
            }
            set
            {
                if (_SubjectDataID != value)
                {
                    OnSubjectDataIDChanging(value);
                    ReportPropertyChanging("SubjectDataID");
                    _SubjectDataID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SubjectDataID");
                    OnSubjectDataIDChanged();
                }
            }
        }
        private global::System.Int32 _SubjectDataID;
        partial void OnSubjectDataIDChanging(global::System.Int32 value);
        partial void OnSubjectDataIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 InstituteID
        {
            get
            {
                return _InstituteID;
            }
            set
            {
                OnInstituteIDChanging(value);
                ReportPropertyChanging("InstituteID");
                _InstituteID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InstituteID");
                OnInstituteIDChanged();
            }
        }
        private global::System.Int32 _InstituteID;
        partial void OnInstituteIDChanging(global::System.Int32 value);
        partial void OnInstituteIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Departaments", "Departament")]
        public Departament Departament
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Departament>("SPModel.FK_SubjectsData_Departaments", "Departament").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Departament>("SPModel.FK_SubjectsData_Departaments", "Departament").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Departament> DepartamentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Departament>("SPModel.FK_SubjectsData_Departaments", "Departament");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Departament>("SPModel.FK_SubjectsData_Departaments", "Departament", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Faculties", "Faculty")]
        public Faculty Faculty
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faculty>("SPModel.FK_SubjectsData_Faculties", "Faculty").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faculty>("SPModel.FK_SubjectsData_Faculties", "Faculty").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Faculty> FacultyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Faculty>("SPModel.FK_SubjectsData_Faculties", "Faculty");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Faculty>("SPModel.FK_SubjectsData_Faculties", "Faculty", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Semesters", "Semester")]
        public Semester Semester
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Semester>("SPModel.FK_SubjectsData_Semesters", "Semester").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Semester>("SPModel.FK_SubjectsData_Semesters", "Semester").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Semester> SemesterReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Semester>("SPModel.FK_SubjectsData_Semesters", "Semester");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Semester>("SPModel.FK_SubjectsData_Semesters", "Semester", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_SpecializationsData", "SpecializationsData")]
        public SpecializationsData SpecializationsData
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SpecializationsData>("SPModel.FK_SubjectsData_SpecializationsData", "SpecializationsData").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SpecializationsData>("SPModel.FK_SubjectsData_SpecializationsData", "SpecializationsData").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SpecializationsData> SpecializationsDataReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SpecializationsData>("SPModel.FK_SubjectsData_SpecializationsData", "SpecializationsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SpecializationsData>("SPModel.FK_SubjectsData_SpecializationsData", "SpecializationsData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Subjects", "Subject")]
        public Subject Subject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subject>("SPModel.FK_SubjectsData_Subjects", "Subject").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subject>("SPModel.FK_SubjectsData_Subjects", "Subject").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Subject> SubjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Subject>("SPModel.FK_SubjectsData_Subjects", "Subject");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Subject>("SPModel.FK_SubjectsData_Subjects", "Subject", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectTypesData_SubjectsData", "SubjectTypesData")]
        public EntityCollection<SubjectTypesData> SubjectTypesDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectTypesData>("SPModel.FK_SubjectTypesData_SubjectsData", "SubjectTypesData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectTypesData>("SPModel.FK_SubjectTypesData_SubjectsData", "SubjectTypesData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "PlansData", "Plan")]
        public EntityCollection<Plan> Plans
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Plan>("SPModel.PlansData", "Plan");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Plan>("SPModel.PlansData", "Plan", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectsData_Institutes", "Institute")]
        public Institute Institute
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Institute>("SPModel.FK_SubjectsData_Institutes", "Institute").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Institute>("SPModel.FK_SubjectsData_Institutes", "Institute").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Institute> InstituteReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Institute>("SPModel.FK_SubjectsData_Institutes", "Institute");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Institute>("SPModel.FK_SubjectsData_Institutes", "Institute", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="SubjectType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubjectType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SubjectType object.
        /// </summary>
        /// <param name="subjectTypeID">Initial value of the SubjectTypeID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static SubjectType CreateSubjectType(global::System.Int32 subjectTypeID, global::System.String name)
        {
            SubjectType subjectType = new SubjectType();
            subjectType.SubjectTypeID = subjectTypeID;
            subjectType.Name = name;
            return subjectType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SubjectTypeID
        {
            get
            {
                return _SubjectTypeID;
            }
            set
            {
                if (_SubjectTypeID != value)
                {
                    OnSubjectTypeIDChanging(value);
                    ReportPropertyChanging("SubjectTypeID");
                    _SubjectTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SubjectTypeID");
                    OnSubjectTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _SubjectTypeID;
        partial void OnSubjectTypeIDChanging(global::System.Int32 value);
        partial void OnSubjectTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectTypesData_SubjectTypes", "SubjectTypesData")]
        public EntityCollection<SubjectTypesData> SubjectTypesDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<SubjectTypesData>("SPModel.FK_SubjectTypesData_SubjectTypes", "SubjectTypesData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<SubjectTypesData>("SPModel.FK_SubjectTypesData_SubjectTypes", "SubjectTypesData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="SubjectTypesData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SubjectTypesData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new SubjectTypesData object.
        /// </summary>
        /// <param name="subjectDataID">Initial value of the SubjectDataID property.</param>
        /// <param name="subjectTypeID">Initial value of the SubjectTypeID property.</param>
        /// <param name="hours">Initial value of the Hours property.</param>
        public static SubjectTypesData CreateSubjectTypesData(global::System.Int32 subjectDataID, global::System.Int32 subjectTypeID, global::System.Double hours)
        {
            SubjectTypesData subjectTypesData = new SubjectTypesData();
            subjectTypesData.SubjectDataID = subjectDataID;
            subjectTypesData.SubjectTypeID = subjectTypeID;
            subjectTypesData.Hours = hours;
            return subjectTypesData;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SubjectDataID
        {
            get
            {
                return _SubjectDataID;
            }
            set
            {
                if (_SubjectDataID != value)
                {
                    OnSubjectDataIDChanging(value);
                    ReportPropertyChanging("SubjectDataID");
                    _SubjectDataID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SubjectDataID");
                    OnSubjectDataIDChanged();
                }
            }
        }
        private global::System.Int32 _SubjectDataID;
        partial void OnSubjectDataIDChanging(global::System.Int32 value);
        partial void OnSubjectDataIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SubjectTypeID
        {
            get
            {
                return _SubjectTypeID;
            }
            set
            {
                if (_SubjectTypeID != value)
                {
                    OnSubjectTypeIDChanging(value);
                    ReportPropertyChanging("SubjectTypeID");
                    _SubjectTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SubjectTypeID");
                    OnSubjectTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _SubjectTypeID;
        partial void OnSubjectTypeIDChanging(global::System.Int32 value);
        partial void OnSubjectTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Hours
        {
            get
            {
                return _Hours;
            }
            set
            {
                OnHoursChanging(value);
                ReportPropertyChanging("Hours");
                _Hours = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Hours");
                OnHoursChanged();
            }
        }
        private global::System.Double _Hours;
        partial void OnHoursChanging(global::System.Double value);
        partial void OnHoursChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectTypesData_SubjectTypes", "SubjectTypes")]
        public SubjectType SubjectType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubjectType>("SPModel.FK_SubjectTypesData_SubjectTypes", "SubjectTypes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubjectType>("SPModel.FK_SubjectTypesData_SubjectTypes", "SubjectTypes").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SubjectType> SubjectTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubjectType>("SPModel.FK_SubjectTypesData_SubjectTypes", "SubjectTypes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SubjectType>("SPModel.FK_SubjectTypesData_SubjectTypes", "SubjectTypes", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_SubjectTypesData_SubjectsData", "SubjectsData")]
        public SubjectsData SubjectsData
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubjectsData>("SPModel.FK_SubjectTypesData_SubjectsData", "SubjectsData").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubjectsData>("SPModel.FK_SubjectTypesData_SubjectsData", "SubjectsData").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<SubjectsData> SubjectsDataReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<SubjectsData>("SPModel.FK_SubjectTypesData_SubjectsData", "SubjectsData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<SubjectsData>("SPModel.FK_SubjectTypesData_SubjectsData", "SubjectsData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SPModel", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new User object.
        /// </summary>
        /// <param name="userID">Initial value of the UserID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="password">Initial value of the Password property.</param>
        /// <param name="roleID">Initial value of the RoleID property.</param>
        public static User CreateUser(global::System.Int32 userID, global::System.String name, global::System.String password, global::System.Int32 roleID)
        {
            User user = new User();
            user.UserID = userID;
            user.Name = name;
            user.Password = password;
            user.RoleID = roleID;
            return user;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    OnUserIDChanging(value);
                    ReportPropertyChanging("UserID");
                    _UserID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        private global::System.Int32 _UserID;
        partial void OnUserIDChanging(global::System.Int32 value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> LastActiveDate
        {
            get
            {
                return _LastActiveDate;
            }
            set
            {
                OnLastActiveDateChanging(value);
                ReportPropertyChanging("LastActiveDate");
                _LastActiveDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastActiveDate");
                OnLastActiveDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _LastActiveDate;
        partial void OnLastActiveDateChanging(Nullable<global::System.DateTime> value);
        partial void OnLastActiveDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                OnRoleIDChanging(value);
                ReportPropertyChanging("RoleID");
                _RoleID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleID");
                OnRoleIDChanged();
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Plans_Users", "Plans")]
        public EntityCollection<Plan> Plans
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Plan>("SPModel.FK_Plans_Users", "Plans");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Plan>("SPModel.FK_Plans_Users", "Plans", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SPModel", "FK_Users_Roles", "Roles")]
        public Role Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("SPModel.FK_Users_Roles", "Roles").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("SPModel.FK_Users_Roles", "Roles").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Role> RoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("SPModel.FK_Users_Roles", "Roles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Role>("SPModel.FK_Users_Roles", "Roles", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
